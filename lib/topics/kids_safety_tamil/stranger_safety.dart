import 'package:e_she_book/tamil/kids_safety_tamil.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class StrangerSafetyTamilPage extends StatefulWidget {
  @override
  _StrangerSafetyTamilPageState createState() => _StrangerSafetyTamilPageState();
}

class _StrangerSafetyTamilPageState extends State<StrangerSafetyTamilPage> {
  bool isCompleted = false;
  int quizScore = -1;
  bool hasTakenQuiz = false;
  Map<int, String> userAnswers = {};
  final String topicName = "StrangerSafetyTamil";

  final Map<int, String> correctAnswers = {
    1: "роТро░рпБ роХрпБро┤роирпНродрпИ роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роЕро▓рпНро▓родрпБ роироорпНрокроорпБроЯро┐ропро╛род роирокро░рпН",
    2: "рооро▒рпБроХрпНроХро╡рпБроорпН ро╡ро┐ро▓роХро╡рпБроорпН роЪрпЖро▓рпНро▓ро╡рпБроорпН",
    3: "родрпЖро░ро┐роирпНрод рокрпЖро░ро┐ропро╡ро░ро┐роЯроорпН роХрпВро▒ро╡рпБроорпН",
    4: "роЕро╡роЪро░роХро╛ро▓родрпНродро┐ро▓рпН роироорпНрокродрпНродроХрпБроирпНрод роирокро░рпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНрод",
    5: "роХродрпНродро┐ роУроЯро┐роЪрпН роЪрпЖро▓рпНро▓ро╡рпБроорпН роЙродро╡ро┐ роХрпЛро░ро╡рпБроорпН",
  };

  final List<Map<String, dynamic>> quizQuestions = [
    {
      "question": "роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роирокро░рпН ропро╛ро░рпН?",
      "options": [
        "роТро░рпБ роХрпБро┤роирпНродрпИ роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роЕро▓рпНро▓родрпБ роироорпНрокроорпБроЯро┐ропро╛род роирокро░рпН",
        "роТро░рпБ рокро│рпНро│ро┐ роирогрпНрокро░рпН",
        "роТро░рпБ роЖроЪро┐ро░ро┐ропро░рпН",
        "роТро░рпБ роЕрогрпНроЯрпИропро╡ро░рпН"
      ]
    },
    {
      "question": "роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роирокро░рпН рокро░ро┐роЪрпБ роХрпКроЯрпБродрпНродро╛ро▓рпН роОройрпНрой роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН?",
      "options": [
        "рооро▒рпБроХрпНроХро╡рпБроорпН ро╡ро┐ро▓роХро╡рпБроорпН роЪрпЖро▓рпНро▓ро╡рпБроорпН",
        "роиройрпНро▒ро┐ роЪрпКро▓рпНро▓ро╡рпБроорпН",
        "роЕроорпИродро┐ропро╛роХ роПро▒рпНроХро╡рпБроорпН",
        "рокрпЖро▒рпНро▒рпЛро░рпНроХро│ро┐роЯроорпН роХро╛роЯрпНроЯ роЪрпЖро▓рпНро▓ро╡рпБроорпН"
      ]
    },
    {
      "question": "роТро░рпБ роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роирокро░рпН роЕро┤рпИродрпНродро╛ро▓рпН роОройрпНрой роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН?",
      "options": [
        "родрпЖро░ро┐роирпНрод рокрпЖро░ро┐ропро╡ро░ро┐роЯроорпН роХрпВро▒ро╡рпБроорпН",
        "ро╡ро┐ро░рпИро╡ро╛роХ роЪрпЖройрпНро▒рпБ ро╡ро┐роЯро╡рпБроорпН",
        "роЕро╡ро░рпНроХро│ро┐ройрпН роиро╛ропрпИрокрпН рокрпЖро▒ роЙродро╡ро╡рпБроорпН",
        "роорпБродро▓ро┐ро▓рпН рокрогроорпН роХрпЗроЯрпНроХро╡рпБроорпН"
      ]
    },
    {
      "question": "роХрпБроЯрпБроорпНрок ро░роХроЪро┐роп роХрпБро▒ро┐ропрпАроЯрпБ роОройрпНрой?",
      "options": [
        "роЕро╡роЪро░роХро╛ро▓родрпНродро┐ро▓рпН роироорпНрокродрпНродроХрпБроирпНрод роирокро░рпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНрод",
        "ро╡рпАроЯрпНроЯро┐ройрпН роХродро╡рпИ родро┐ро▒роХрпНроХ",
        "ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБроХрпНроХро╛роХ",
        "родрпКро▓рпИрокрпЗроЪро┐ропрпИродрпН родро┐ро▒роХрпНроХ"
      ]
    },
    {
      "question": "роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роирокро░рпН рокро┐роЯро┐роХрпНроХ роорпБропро▒рпНроЪро┐родрпНродро╛ро▓рпН роОройрпНрой роЪрпЖропрпНро╡родрпБ?",
      "options": [
        "роХродрпНродро┐ роУроЯро┐роЪрпН роЪрпЖро▓рпНро▓ро╡рпБроорпН роЙродро╡ро┐ роХрпЛро░ро╡рпБроорпН",
        "роЕроорпИродро┐ропро╛роХ роиро┐ройрпНро▒рпБ роХрпКро│рпНро│ро╡рпБроорпН",
        "роЕро╡ро░рпБроЯройрпН роЕроорпИродро┐ропро╛роХ роЪрпЖройрпНро▒рпБ ро╡ро┐роЯро╡рпБроорпН",
        "роЕро╡ро░рпБроЯройрпН рокрпЗроЪро╡рпБроорпН"
      ]
    },
  ];

  @override
  void initState() {
    super.initState();
    _loadTopicStatus();
  }

  Future<void> _loadTopicStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      isCompleted = prefs.getBool('Completed_$topicName') ?? false;
      quizScore = prefs.getInt('QuizScore_$topicName') ?? -1;
      hasTakenQuiz = prefs.getBool('QuizTaken_$topicName') ?? false;
    });
  }

  Future<void> _saveTopicCompletion(bool value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('Completed_$topicName', value);
    setState(() {
      isCompleted = value;
    });
    if (value) _showQuizDialog();
  }

  Future<void> _saveQuizScore(int score) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('QuizScore_$topicName', score);
    await prefs.setBool('QuizTaken_$topicName', true);
    setState(() {
      quizScore = score;
      hasTakenQuiz = true;
    });
  }

  void _showQuizDialog() {
    userAnswers.clear();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext dialogContext) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text("роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роирокро░рпН рокро╛родрпБроХро╛рокрпНрокрпБ - ро╡ро┐ройро╛ ро╡ро┐роЯрпИ"),
              content: SingleChildScrollView(
                child: Column(
                  children: quizQuestions.map((question) {
                    int questionIndex = quizQuestions.indexOf(question) + 1;
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(question["question"], style: TextStyle(fontWeight: FontWeight.bold)),
                        ...question["options"].map<Widget>((option) {
                          return RadioListTile<String>(
                            title: Text(option),
                            value: option,
                            groupValue: userAnswers[questionIndex],
                            onChanged: (String? value) {
                              setState(() {
                                userAnswers[questionIndex] = value!;
                              });
                            },
                          );
                        }).toList(),
                      ],
                    );
                  }).toList(),
                ),
              ),
              actions: [
                TextButton(
                  child: Text("роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН"),
                  onPressed: () {
                    if (userAnswers.length < quizQuestions.length) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text("роЕройрпИродрпНродрпБ ро╡ро┐ройро╛роХрпНроХро│рпБроХрпНроХрпБроорпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН")),
                      );
                    } else {
                      Navigator.pop(dialogContext);
                      _evaluateQuiz();
                    }
                  },
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _evaluateQuiz() {
    int score = 0;
    userAnswers.forEach((key, value) {
      if (correctAnswers[key] == value) {
        score++;
      }
    });
    _saveQuizScore(score);
    _showQuizResult(score);
  }

  void _showQuizResult(int score) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("роородро┐рокрпНрокрпАроЯрпНроЯрпБ роорпБроЯро┐ро╡рпБ"),
          content: Text("роирпАроЩрпНроХро│рпН $score / ${quizQuestions.length} роородро┐рокрпНрокрпЖрогрпНроХро│рпН рокрпЖро▒рпНро▒рпБро│рпНро│рпАро░рпНроХро│рпН."),
          actions: [
            TextButton(
              child: Text("роЪро░ро┐"),
              onPressed: () => Navigator.pop(context),
            ),
            if (score >= 3)
              TextButton(
                child: Text("роЕроЯрпБродрпНрод родро▓рпИрокрпНрокрпБ"),
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(context, '/home_safety_ta');
                },
              ),
            TextButton(
              child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН"),
              onPressed: () {
                Navigator.pop(context);
                _showQuizDialog();
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFFF4500), Color(0xFF5B0000)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white, size: 28),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        title: Text("роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роирокро░рпН рокро╛родрпБроХро╛рокрпНрокрпБ"),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: ListView(
                children: [
                  _buildQuestionAnswer("ЁЯзТ роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роирокро░рпН ропро╛ро░рпН?", "роХрпБро┤роирпНродрпИроХрпНроХрпБ родрпЖро░ро┐ропро╛род роирокро░рпН роЕро▓рпНро▓родрпБ роироорпНрок роорпБроЯро┐ропро╛род роирокро░рпН.", imagePath: 'assets/kids_2.1.png'),
                  _buildQuestionAnswer("ЁЯОБ рокро░ро┐роЪрпБроХро│рпН роХрпКроЯрпБродрпНродро╛ро▓рпН?", "рооро▒рпБроХрпНроХро╡рпБроорпН рооро▒рпНро▒рпБроорпН роироорпНрокродрпНродроХрпБроирпНрод рокрпЖро░ро┐ропро╡ро░ро┐роЯроорпН роХрпВро▒ро╡рпБроорпН."),
                  _buildQuestionAnswer("ЁЯЪл роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роирокро░рпН роЕро┤рпИродрпНродро╛ро▓рпН?", "родрпЖро░ро┐роирпНрод рокрпЖро░ро┐ропро╡ро░ро┐роЯроорпН роЙроЯройроЯро┐ропро╛роХ роХрпВро▒ро╡рпБроорпН.", imagePath: 'assets/kids_2.0.png'),
                  _buildQuestionAnswer("ЁЯФС роХрпБроЯрпБроорпНрок ро░роХроЪро┐ропроХрпН роХрпБро▒ро┐ропрпАроЯрпБ?", "роироорпНрокродрпНродроХрпБроирпНрод роирокро░рпНроХро│рпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНрод рокропройрпНрокроЯрпБроорпН ро░роХроЪро┐роп ро╡ро╛ро░рпНродрпНродрпИ."),
                  _buildQuestionAnswer("ЁЯПГ рокропрокрпНрокроЯрпБроорпНрокрпЛродрпБ роОройрпНрой роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН?", "роХродрпНродро┐ роУроЯро┐роЪрпН роЪрпЖро▓рпНро▓ро╡рпБроорпН рооро▒рпНро▒рпБроорпН роЙродро╡ро┐ роХрпЛро░ро╡рпБроорпН.", imagePath: 'assets/kids_2.2.png'),
                ],
              ),
            ),
            CheckboxListTile(
              title: Text("роорпБроЯро┐роХрпНроХрокрпНрокроЯрпНроЯродро╛роХ роХрпБро▒ро┐роХрпНроХро╡рпБроорпН"),
              value: isCompleted,
              onChanged: (value) {
                _saveTopicCompletion(value ?? false);
              },
            ),
            if (hasTakenQuiz)
              Text("роХроЯрпИроЪро┐ роородро┐рокрпНрокрпЖрогрпН: $quizScore / ${quizQuestions.length}"),
            if (hasTakenQuiz)
              ElevatedButton(
                onPressed: _showQuizDialog,
                child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН"),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuestionAnswer(String question, String answer, {String? imagePath}) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      elevation: 4,
      child: Padding(
        padding: EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (imagePath != null)
              ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.asset(
                  imagePath,
                  fit: BoxFit.cover,
                  width: double.infinity,
                  height: 180,
                ),
              ),
            if (imagePath != null)
              SizedBox(height: 12),
            Text(
              question,
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
            ),
            SizedBox(height: 6),
            Text(
              answer,
              style: TextStyle(fontSize: 16, color: Colors.black),
            ),
          ],
        ),
      ),
    );
  }
}
