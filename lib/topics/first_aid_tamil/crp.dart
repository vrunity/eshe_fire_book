import 'package:e_she_book/english/first_aid_english.dart';
import 'package:e_she_book/tamil/first_aid_tamil.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:intl/intl.dart';

class CPRForAdultsPage extends StatefulWidget {
  @override
  _CPRForAdultsPageState createState() => _CPRForAdultsPageState();
}

class _CPRForAdultsPageState extends State<CPRForAdultsPage> {
  bool isCompleted = false;
  int quizScore = -1;
  bool hasTakenQuiz = false;
  Map<int, String> userAnswers = {};
  final String topicName = "CPRForAdults";

  final Map<int, String> correctAnswers = {
    1: "роЗродроп рооро▒рпНро▒рпБроорпН роЪрпБро╡ро╛роЪ роорпАроЯрпНрокрпБ роЪрпЖропро▓рпН",
    2: "роирокро░рпБроХрпНроХрпБ роЗродропродрпН родрпБроЯро┐рокрпНрокрпБ роЗро▓рпНро▓ро╛рооро▓рпН роЪрпБро╡ро╛роЪро┐роХрпНроХро╡рпБрооро┐ро▓рпНро▓рпИ роОройрпНро▒ро╛ро▓рпН",
    3: "30:2",
    4: "рооро╛ро░рпНрокро┐ройрпН роироЯрпБро╡ро┐ро▓рпН",
    5: "роорпВро│рпИроХрпНроХрпБроорпН роЗродропродрпНродро┐ро▒рпНроХрпБроорпН роЗро░родрпНрод роУроЯрпНроЯродрпНродрпИ роорпАроЯрпНроЯрпЖроЯрпБроХрпНроХ",
  };

  final List<Map<String, dynamic>> quizQuestions = [
    {
      "question": "CPR роОройрпНрокродрпБ роОройрпНрой?",
      "options": [
        "роЗродроп роЕро┤рпБродрпНродродрпН родрпЖро░ро┐ро╡рпБ",
        "роЗродроп рооро▒рпНро▒рпБроорпН роЪрпБро╡ро╛роЪ роорпАроЯрпНрокрпБ роЪрпЖропро▓рпН",
        "рооро╛ро░рпНрокрпБ роЕро┤рпБродрпНрод родро╛ро│роорпН",
        "роЗродроп родрпБроЯро┐рокрпНрокрпБ роорпАроЯрпНрокрпБ"
      ]
    },
    {
      "question": "CPR роОрокрпНрокрпЛродрпБ роХрпКроЯрпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН?",
      "options": [
        "роирокро░рпН родрпВроЩрпНроХрпБроХро┐ро▒ро╛ро░ро╛ роОройрпНрокродрпИрокрпН рокро╛ро░рпНроХрпНроХ",
        "роирокро░рпБроХрпНроХрпБ роЗродропродрпН родрпБроЯро┐рокрпНрокрпБ роЗро▓рпНро▓ро╛рооро▓рпН роЪрпБро╡ро╛роЪро┐роХрпНроХро╡рпБрооро┐ро▓рпНро▓рпИ",
        "роирокро░рпН рооропроЩрпНроХрпБроХро┐ро▒ро╛ро░рпН роОройрпНро▒ро╛ро▓рпН",
        "ро╡ропро┐ро▒рпНро▒рпБ ро╡ро▓ро┐роХрпНроХрпБ"
      ]
    },
    {
      "question": "CPR роЗро▓рпН роХроорпНрокро┐ро░роороорпН рооро▒рпНро▒рпБроорпН роорпВроЪрпНроЪро│ро┐рокрпНрокрпБ ро╡ро┐роХро┐родроорпН роОройрпНрой?",
      "options": [
        "15:2",
        "5:1",
        "30:2",
        "10:10"
      ]
    },
    {
      "question": "роОроЩрпНроХрпЗ роХроорпНрокро┐ро░роороорпН роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН?",
      "options": [
        "роЗроЯродрпБ рооро╛ро░рпНрокрпБ",
        "ро╡ропро┐ро▒рпНро▒ро┐ро▓рпН",
        "рооро╛ро░рпНрокро┐ройрпН роироЯрпБро╡ро┐ро▓рпН",
        "рокро┐ройрпНройро╛ро▓рпН"
      ]
    },
    {
      "question": "CPR роПройрпН роорпБроХрпНроХро┐ропроорпН?",
      "options": [
        "роорпВро│рпИроХрпНроХрпБроорпН роЗродропродрпНродро┐ро▒рпНроХрпБроорпН роЗро░родрпНрод роУроЯрпНроЯродрпНродрпИ роорпАроЯрпНроЯрпЖроЯрпБроХрпНроХ",
        "родроЪрпИроХро│рпН родро│ро░",
        "роЪрпЖро░ро┐рооро╛ройродрпНродрпИ роорпЗроорпНрокроЯрпБродрпНрод",
        "роирокро░рпИ роЕроорпИродро┐ропро╛роХрпНроХ"
      ]
    },
  ];

  @override
  void initState() {
    super.initState();
    _loadProgress();
  }

  Future<void> _loadProgress() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      isCompleted = prefs.getBool('Completed_$topicName') ?? false;
      quizScore = prefs.getInt('QuizScore_$topicName') ?? -1;
      hasTakenQuiz = prefs.getBool('QuizTaken_$topicName') ?? false;
    });
  }

  Future<void> _saveCompletion(bool value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('Completed_$topicName', value);
    setState(() {
      isCompleted = value;
    });
    if (value) _showQuizDialog();
  }

  Future<void> _saveQuizScore(int score) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('QuizScore_$topicName', score);
    await prefs.setBool('QuizTaken_$topicName', true);
    setState(() {
      quizScore = score;
      hasTakenQuiz = true;
    });
  }

  void _showQuizDialog() {
    userAnswers.clear();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext dialogContext) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text("CPR for Adults Quiz"),
              content: SingleChildScrollView(
                child: Column(
                  children: quizQuestions.map((question) {
                    int index = quizQuestions.indexOf(question) + 1;
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text("$index. ${question["question"]}", style: TextStyle(fontWeight: FontWeight.bold)),
                        ...question["options"].map<Widget>((option) {
                          return RadioListTile<String>(
                            title: Text(option),
                            value: option,
                            groupValue: userAnswers[index],
                            onChanged: (value) {
                              setState(() {
                                userAnswers[index] = value!;
                              });
                            },
                          );
                        }).toList(),
                        SizedBox(height: 10),
                      ],
                    );
                  }).toList(),
                ),
              ),
              actions: [
                TextButton(
                  child: Text("роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН"),
                  onPressed: () {
                    if (userAnswers.length < quizQuestions.length) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text("родропро╡рпБроЪрпЖропрпНродрпБ роЕройрпИродрпНродрпБ роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБроорпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН.")),
                      );
                    } else {
                      Navigator.pop(dialogContext);
                      _evaluateQuiz();
                    }
                  },
                )
              ],
            );
          },
        );
      },
    );
  }

  void _evaluateQuiz() async {
    int score = 0;
    userAnswers.forEach((key, value) {
      if (correctAnswers[key] == value) {
        score++;
      }
    });

    await _saveQuizScore(score);

    if (score >= 3) {
      final String formattedDate = DateFormat('dd-MMM-yyyy').format(DateTime.now());
      SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.setString('CourseCompletedOn_First Aid', formattedDate);
      print("тЬЕ Course completed date stored for First Aid: $formattedDate");
    }

    _showResult(score);
  }

  void _showResult(int score) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ роорпБроЯро┐ро╡рпБ"),
          content: Text("You scored $score out of ${quizQuestions.length}."),
          actions: [
            if (score > 3) // тЬЕ Show Next Topic only if score > 3
              TextButton(
                child: Text("роЪро░ро┐"),
                onPressed: () =>  Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(builder: (context) => firstaid_tamil()),
                ),
              ),
            TextButton(
              child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐"),
              onPressed: () {
                Navigator.pop(context);
                _showQuizDialog();
              },
            ),
          ],
        );
      },
    );
  }

  Widget _buildQuestionAnswer(String question, String answer, {String? imagePath}) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      elevation: 4,
      child: Padding(
        padding: EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // If image is provided, show it at the top full-width
            if (imagePath != null)
              ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.asset(
                  imagePath,
                  fit: BoxFit.cover,
                  width: double.infinity,
                  height: 180,
                ),
              ),
            if (imagePath != null)
              SizedBox(height: 12),
            // Question
            Text(
              question,
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
            ),
            SizedBox(height: 6),
            // Answer
            Text(
              answer,
              style: TextStyle(fontSize: 16, color: Colors.black),
            ),
          ],
        ),
      ),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
          leading: IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: () {
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(builder: (context) => firstaid_tamil()),
              );
            },
          ),title: Text("CPR")),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: ListView(
                children: [
                  // CPR Q&A in Tamil

                  _buildQuestionAnswer("ЁЯТУ CPR роОройрпНрокродрпБ роОройрпНрой?", "CPR роОройрпНрокродрпБ 'рооройро┐род роЙро░рпБро╡ро┐ро┤роирпНродрпБ ро╡ро┐ро┤рпБроирпНродрпБро╡ро┐роЯрпНроЯ роирокро░рпБроХрпНроХрпБ ро╣ро╛ро░рпНроЯрпН рооро▒рпНро▒рпБроорпН роорпВро│рпИроХрпНроХрпБ роЗро░родрпНрод роУроЯрпНроЯродрпНродрпИ родро▒рпНроХро╛ро▓ро┐роХрооро╛роХ роорпАроЯрпНроЯрпЖроЯрпБроХрпНроХ' роЪрпЖропрпНропрокрпНрокроЯрпБроорпН роЕро╡роЪро░ роЪро┐роХро┐роЪрпНроЪрпИ роорпБро▒рпИ.", imagePath: 'assets/first_aid_6.0.png'),
                  _buildQuestionAnswer("ЁЯТУ CPR роОрокрпНрокрпЛродрпБ родрпЗро╡рпИропро╛роХрпБроорпН?", "роирокро░рпН ро╡ро┐ро┤ро┐рокрпНрокроЯрпИропро╛рооро▓рпН роЗро░рпБрокрпНрокродрпБроорпН, роЪрпБро╡ро╛роЪро┐роХрпНроХро╛родродрпБроорпН роЕро▓рпНро▓родрпБ роЗродропродрпН родрпБроЯро┐рокрпНрокрпБ роЗро▓рпНро▓ро╛родродрпБроорпН рокрпЛродрпБ."),
                  _buildQuestionAnswer("ЁЯТУ роирокро░рпН ро╡ро┐ро┤ро┐рокрпНрокроЯрпИропрпБро▒ро╛ро░ро╛ роОройрпНрокродрпИ роОрокрпНрокроЯро┐ роЪро░ро┐рокро╛ро░рпНрокрпНрокродрпБ?", "роорпЖродрпБро╡ро╛роХ роирокро░рпИ роЖроЯрпНроЯро┐рокрпН рокро╛ро░рпНродрпНродрпБ, 'роирпАроЩрпНроХро│рпН роЪро░ро┐ роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│ро╛?' роОройроХрпН роХрпЗро│рпБроЩрпНроХро│рпН.", imagePath: 'assets/first_aid_6.1.png'),
                  _buildQuestionAnswer("ЁЯТУ роХроорпНрокро┐ро░роороорпН рооро▒рпНро▒рпБроорпН роорпВроЪрпНроЪро│ро┐рокрпНрокрпБ ро╡ро┐роХро┐родроорпН роОройрпНрой?", "30 роорпБро▒рпИ роХроорпНрокро┐ро░роороорпН, роЕродройрпН рокро┐ройрпНрокрпБ 2 роорпАроЯрпНрокрпБ роорпВроЪрпНроЪрпБроХро│рпН."),
                  _buildQuestionAnswer("ЁЯТУ роОро╡рпНро╡ро│ро╡рпБ роЖро┤родрпНродро┐ро▓рпН роХроорпНрокро┐ро░роороорпН роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН?", "рооро╛ро░рпНрокро┐ро▓рпН роХрпБро▒рпИроирпНродродрпБ 2 роЕроЩрпНроХрпБро▓роорпН (5 роЪрпЖ.роорпА) роЖро┤родрпНродро┐ро▓рпН.", imagePath: 'assets/first_aid_6.2.png'),
                  _buildQuestionAnswer("ЁЯТУ роХроорпНрокро┐ро░роо ро╡ро┐роХро┐родроорпН роОройрпНрой?", "роиро┐рооро┐роЯродрпНродро┐ро▒рпНроХрпБ 100 роорпБродро▓рпН 120 ро╡ро░рпИ роХроорпНрокро┐ро░роороЩрпНроХро│рпН."),
                  _buildQuestionAnswer("ЁЯТУ роорпВроЪрпНроЪро│ро┐рокрпНрокродро▒рпНроХро╛рой роорпБройрпН родро▓рпИ ро╡ро│рпИродрпНродро▓рпН родрпЗро╡рпИродро╛ройро╛?", "роЖроорпН, 'родро▓рпИродрпКроЯрпНроЯрпБ-роиро╛ро╡роЯрпИроХрпНроХ' роорпБро▒рпИ рокропройрпНрокроЯрпБродрпНродро┐ ро╡ро╛ропрпБро╡ро┤ро┐ропрпИ родро┐ро▒роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.", imagePath: 'assets/first_aid_6.3.png'),
                  _buildQuestionAnswer("ЁЯТУ роирпАроЩрпНроХро│рпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒ро╡ро┐ро▓рпНро▓рпИ роОройрпНро▒ро╛ро▓рпН?", "роорпБропро▒рпНроЪро┐ CPR тАФ роХрпИроХро│рпИ роороЯрпНроЯрпБроорпН рокропройрпНрокроЯрпБродрпНродро┐ роХроорпНрокро┐ро░роороорпН роЪрпЖропрпНропро╡рпБроорпН, роорпВроЪрпНроЪро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯро╛роорпН."),
                  _buildQuestionAnswer("ЁЯТУ CPR роОро╡рпНро╡ро│ро╡рпБ роирпЗро░роорпН родрпКроЯро░ро╡рпЗрогрпНроЯрпБроорпН?", "рооро░рпБродрпНродрпБро╡ роЙродро╡ро┐ ро╡ро░рпБроорпНро╡ро░рпИ роЕро▓рпНро▓родрпБ роирокро░рпН ро╡ро┐ро┤ро┐родрпНродрпБро╡ро░рпБроорпНро╡ро░рпИ.", imagePath: 'assets/first_aid_6.4.png'),
                  _buildQuestionAnswer("ЁЯТУ CPR рокрпЛродрпБ AED рокропройрпНрокроЯрпБродрпНродро▓ро╛рооро╛?", "роЖроорпН, ро╡ро╛ропро┐ро▓ро┐ро▓рпН роХро┐роЯрпИроХрпНроХрпБроорпН роЙроЯройрпЗ родро╛ройро┐ропроЩрпНроХро┐ ро╡рпЖро│ро┐ропрпБро▒рпБродро┐ роЪро╛родройроорпН (AED) рокропройрпНрокроЯрпБродрпНродро▓ро╛роорпН.")
                ],
              ),
            ),
            CheckboxListTile(
              title: Text("роорпБроЯро┐роирпНродродро╛роХ роХрпБро▒ро┐роХрпНроХро╡рпБроорпН"),
              value: isCompleted,
              onChanged: (value) => _saveCompletion(value ?? false),
            ),
            if (hasTakenQuiz)
              Text("роХроЯрпИроЪро┐ роородро┐рокрпНрокрпЖрогрпН: $quizScore / ${quizQuestions.length}"),
            if (hasTakenQuiz)
              ElevatedButton(
                onPressed: _showQuizDialog,
                child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐"),
              ),
          ],
        ),
      ),
    );
  }
}
