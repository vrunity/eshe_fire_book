import 'package:e_she_book/tamil/road_safety_tamil.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class TrafficSignsPageTamil extends StatefulWidget {
  @override
  _TrafficSignsPageTamilState createState() => _TrafficSignsPageTamilState();
}

class _TrafficSignsPageTamilState extends State<TrafficSignsPageTamil> {
  bool isCompleted = false;
  int quizScore = -1;
  bool hasTakenQuiz = false;
  Map<int, String> userAnswers = {};
  final String topicName = "TrafficSignsTamil";

  final Map<int, String> correctAnswers = {
    1: "роЪро╛ро▓рпИрокрпН рокропрогро┐роХро│рпИ ро╡ро┤ро┐роироЯродрпНродрпБроорпН рооро▒рпНро▒рпБроорпН роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНродрпБроорпН",
    2: "роирпАроЩрпНроХро│рпН роорпБро┤рпБроорпИропро╛роХ роиро┐ройрпНро▒рпБро╡ро┐роЯ ро╡рпЗрогрпНроЯрпБроорпН",
    3: "роорпЖродрпБро╡ро╛роХ ро╡ро╛роХройродрпНродрпИ роЗропроХрпНроХро┐ роиро┐ройрпНро▒рпБро╡ро┐роЯ родропро╛ро░ро╛роХ роЗро░рпБроЩрпНроХро│рпН",
    4: "роороХрпНроХро│рпН рокро╛родрпБроХро╛рокрпНрокро╛роХ роЪро╛ро▓рпИропрпИ роХроЯроХрпНроХрпБроорпН роЗроЯроорпН",
    5: "рокро╛родрпБроХро╛рокрпНрокро╛рой ро╡рпЗроХродрпНродрпИ рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН",
  };

  final List<Map<String, dynamic>> quizQuestions = [
    {
      "question": "роЪро╛ро▓рпИ роЪро┐роХрпНройро▓рпНроХро│ро┐ройрпН роирпЛроХрпНроХроорпН роОройрпНрой?",
      "options": [
        "роЪро╛ро▓рпИрокрпН рокропрогро┐роХро│рпИ ро╡ро┤ро┐роироЯродрпНродрпБроорпН рооро▒рпНро▒рпБроорпН роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНродрпБроорпН",
        "роЪро╛ро▓рпИ роЕро▓роЩрпНроХро░ро┐роХрпНроХ",
        "роУроЯрпНроЯрпБройро░рпНроХро│рпИ роХрпБро┤рокрпНрок",
        "роироЯроХрпНроХрпЛро░рпНроХро│рпБроХрпНроХрпЗ роороЯрпНроЯрпБроорпН"
      ]
    },
    {
      "question": "Stop роЪро┐ройрпНройродрпНродро┐ройрпН рокрпКро░рпБро│рпН роОройрпНрой?",
      "options": [
        "роирпАроЩрпНроХро│рпН роорпБро┤рпБроорпИропро╛роХ роиро┐ройрпНро▒рпБро╡ро┐роЯ ро╡рпЗрогрпНроЯрпБроорпН",
        "роЪро▒рпНро▒рпБ роорпЖродрпБро╡ро╛роХ роУроЯрпНроЯрпБроЩрпНроХро│рпН",
        "роХро┐ро│ро╛роХрпНроЪройрпН роЕроЯро┐родрпНродрпБ рокрпЛроЩрпНроХро│рпН",
        "ро▓рпИроЯрпН роХрпКроЯрпБроЩрпНроХро│рпН"
      ]
    },
    {
      "question": "роороЮрпНроЪро│рпН ро╡рогрпНрог роЪро┐роХрпНройро▓ро┐ройрпН роЕро░рпНродрпНродроорпН?",
      "options": [
        "роорпЖродрпБро╡ро╛роХ ро╡ро╛роХройродрпНродрпИ роЗропроХрпНроХро┐ роиро┐ройрпНро▒рпБро╡ро┐роЯ родропро╛ро░ро╛роХ роЗро░рпБроЩрпНроХро│рпН",
        "ро╡рпЗроХрооро╛роХ роУроЯрпНроЯрпБроЩрпНроХро│рпН",
        "родрпКроЯро░рпНроирпНродрпБ роЪрпЖро▓рпНро▓рпБроЩрпНроХро│рпН",
        "рокрпБро▒роХрпНроХрогро┐родрпНродрпБ роЪрпЖро▓рпНро▓ро▓ро╛роорпН"
      ]
    },
    {
      "question": "роироЯроХрпНроХрпЛро░рпНроХро│рпН роХроЯроХрпНроХрпБроорпН роЪро┐ройрпНройроорпН роОройрпНрой роХрпВро▒рпБроХро┐ро▒родрпБ?",
      "options": [
        "роороХрпНроХро│рпН рокро╛родрпБроХро╛рокрпНрокро╛роХ роЪро╛ро▓рпИропрпИ роХроЯроХрпНроХрпБроорпН роЗроЯроорпН",
        "рокрпИроХрпН рокро╛родрпИ",
        "рокро╛ро░рпНроХро┐роЩрпН роЗроЯроорпН",
        "роЕроорпИрокрпНрокрпБрокрпН рокроХрпБродро┐"
      ]
    },
    {
      "question": "ро╡рпЗроХроХрпН роХроЯрпНроЯрпБрокрпНрокро╛роЯрпНроЯрпБроЪрпН роЪро┐ройрпНройроЩрпНроХро│рпН роПройрпН роорпБроХрпНроХро┐ропроорпН?",
      "options": [
        "рокро╛родрпБроХро╛рокрпНрокро╛рой ро╡рпЗроХродрпНродрпИ рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН",
        "ро╡рпЗроХрооро╛роХ роУроЯрпНроЯ",
        "рооро▒рпНро▒ ро╡ро╛роХройроЩрпНроХро│рпИ ро╡рпЖро▓рпНро▓",
        "роорпБроХрпНроХро┐ропрооро┐ро▓рпНро▓рпИ"
      ]
    },
  ];

  @override
  void initState() {
    super.initState();
    _loadTopicStatus();
  }

  Future<void> _loadTopicStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      isCompleted = prefs.getBool('Completed_$topicName') ?? false;
      quizScore = prefs.getInt('QuizScore_$topicName') ?? -1;
      hasTakenQuiz = prefs.getBool('QuizTaken_$topicName') ?? false;
    });
  }

  Future<void> _saveTopicCompletion(bool value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('Completed_$topicName', value);
    setState(() {
      isCompleted = value;
    });
    if (value) _showQuizDialog();
  }

  Future<void> _saveQuizScore(int score) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('QuizScore_$topicName', score);
    await prefs.setBool('QuizTaken_$topicName', true);
    setState(() {
      quizScore = score;
      hasTakenQuiz = true;
    });
  }

  void _showQuizDialog() {
    userAnswers.clear();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext dialogContext) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text("роЪро╛ро▓рпИ роЪро┐ройрпНройроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роЪро┐роХрпНройро▓рпНроХро│рпН ро╡ро┐ройро╛"),
              content: SingleChildScrollView(
                child: Column(
                  children: quizQuestions.map((question) {
                    int questionIndex = quizQuestions.indexOf(question) + 1;
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(question["question"], style: TextStyle(fontWeight: FontWeight.bold)),
                        ...question["options"].map<Widget>((option) {
                          return RadioListTile<String>(
                            title: Text(option),
                            value: option,
                            groupValue: userAnswers[questionIndex],
                            onChanged: (String? value) {
                              setState(() {
                                userAnswers[questionIndex] = value!;
                              });
                            },
                          );
                        }).toList(),
                      ],
                    );
                  }).toList(),
                ),
              ),
              actions: [
                TextButton(
                  child: Text("роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН"),
                  onPressed: () {
                    if (userAnswers.length < quizQuestions.length) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text("родропро╡рпБроЪрпЖропрпНродрпБ роЕройрпИродрпНродрпБ ро╡ро┐ройро╛роХрпНроХро│рпБроХрпНроХрпБроорпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН")),
                      );
                    } else {
                      Navigator.pop(dialogContext);
                      _evaluateQuiz();
                    }
                  },
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _evaluateQuiz() {
    int score = 0;
    userAnswers.forEach((key, value) {
      if (correctAnswers[key] == value) {
        score++;
      }
    });
    _saveQuizScore(score);
    _showQuizResult(score);
  }

  void _showQuizResult(int score) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("ро╡ро┐ройро╛ роорпБроЯро┐ро╡рпБроХро│рпН"),
          content: Text("роирпАроЩрпНроХро│рпН ${quizQuestions.length} ро╡ро┐ройро╛роХрпНроХро│ро┐ро▓рпН $score роородро┐рокрпНрокрпЖрогрпНроХро│рпН рокрпЖро▒рпНро▒рпБро│рпНро│рпАро░рпНроХро│рпН."),
          actions: [
            TextButton(
              child: Text("роЪро░ро┐"),
              onPressed: () => Navigator.pop(context),
            ),
            if (score >= 3)
              TextButton(
                child: Text("роЕроЯрпБродрпНрод родро▓рпИрокрпНрокрпБ"),
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(context, '/pedestrian_safety_ta');
                },
              ),
            TextButton(
              child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН"),
              onPressed: () {
                Navigator.pop(context);
                _showQuizDialog();
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFFF4500), Color(0xFF5B0000)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white, size: 28),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (_) => RoadSafetyTamil()),
            );
          },
        ),
        title: Text("роЪро╛ро▓рпИ роЪро┐роХрпНройро▓рпНроХро│рпН рооро▒рпНро▒рпБроорпН роЕроЯрпИропро╛ро│роЩрпНроХро│рпН"),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: ListView(
                children: [
                  _buildQuestionAnswer("ЁЯЪж роЪро┐роХрпНройро▓рпНроХро│ро┐ройрпН роирпЛроХрпНроХроорпН роОройрпНрой?", "роЪро╛ро▓рпИ роЪро┐роХрпНройро▓рпНроХро│рпН рокропрогро┐роХро│рпИ ро╡ро┤ро┐роироЯродрпНрод рооро▒рпНро▒рпБроорпН роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНрод.", imagePath: 'assets/road_2.0.png'),
                  _buildQuestionAnswer("ЁЯЪж Stop роЪро┐ройрпНройродрпНродро┐ройрпН рокрпКро░рпБро│рпН?", "роирпАроЩрпНроХро│рпН роорпБро┤рпБроорпИропро╛роХ роиро┐ройрпНро▒рпБро╡ро┐роЯ ро╡рпЗрогрпНроЯрпБроорпН."),
                  _buildQuestionAnswer("ЁЯЪж роороЮрпНроЪро│рпН ро▓рпИроЯрпН роОройрпНрой роХрпВро▒рпБроХро┐ро▒родрпБ?", "роорпЖродрпБро╡ро╛роХ роУроЯрпНроЯро┐ роиро┐ройрпНро▒рпБро╡ро┐роЯ родропро╛ро░ро╛роХ роЗро░рпБроЩрпНроХро│рпН.", imagePath: 'assets/road_2.1.png'),
                  _buildQuestionAnswer("ЁЯЪж роироЯроХрпНроХрпЛро░рпНроХро│рпБроХрпНроХро╛рой роЪро┐ройрпНройроорпН?", "рокро╛родрпБроХро╛рокрпНрокро╛роХ роЪро╛ро▓рпИропрпИ роХроЯроХрпНроХрпБроорпН роЗроЯродрпНродрпИ роХрпБро▒ро┐роХрпНроХрпБроорпН."),
                  _buildQuestionAnswer("ЁЯЪж ро╡рпЗроХроХрпН роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ роЪро┐ройрпНройроорпН роПройрпН роорпБроХрпНроХро┐ропроорпН?", "рокро╛родрпБроХро╛рокрпНрокро╛рой роУроЯрпНроЯ ро╡рпЗроХродрпНродрпИ роЙро▒рпБродро┐ роЪрпЖропрпНроп.", imagePath: 'assets/road_2.2.png'),
                ],
              ),
            ),
            CheckboxListTile(
              title: Text("роорпБроЯро┐роирпНродродро╛роХ роХрпБро▒ро┐роХрпНроХро╡рпБроорпН"),
              value: isCompleted,
              onChanged: (value) {
                _saveTopicCompletion(value ?? false);
              },
            ),
            if (hasTakenQuiz)
              Text("роХроЯрпИроЪро┐ ро╡ро┐ройро╛ роородро┐рокрпНрокрпЖрогрпН: $quizScore / ${quizQuestions.length}"),
            if (hasTakenQuiz)
              ElevatedButton(
                onPressed: _showQuizDialog,
                child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐ роЪрпЖропрпНропро╡рпБроорпН"),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuestionAnswer(String question, String answer, {String? imagePath}) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      elevation: 4,
      child: Padding(
        padding: EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (imagePath != null)
              ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.asset(
                  imagePath,
                  fit: BoxFit.cover,
                  width: double.infinity,
                  height: 180,
                ),
              ),
            if (imagePath != null)
              SizedBox(height: 12),
            Text(
              question,
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
            ),
            SizedBox(height: 6),
            Text(
              answer,
              style: TextStyle(fontSize: 16, color: Colors.black),
            ),
          ],
        ),
      ),
    );
  }
}
