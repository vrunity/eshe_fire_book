import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:e_she_book/english/bbs_safety_english.dart';

class BBSIntroPageTamil extends StatefulWidget {
  @override
  _BBSIntroPageState createState() => _BBSIntroPageState();
}

class _BBSIntroPageState extends State<BBSIntroPageTamil> {
  bool isCompleted = false;
  int quizScore = -1;
  bool hasTakenQuiz = false;
  Map<int, String> userAnswers = {};
  final String topicName = "BBSIntro";

  final Map<int, String> correctAnswers = {
    1: "BBS роОройрпНрокродрпБ рокро╛родрпБроХро╛рокрпНрокро╛рой роироЯродрпНродрпИроорпБро▒рпИроХро│рпИ роЕроЯрпИропро╛ро│роорпН роХро╛рогрпБроорпН рооро▒рпНро▒рпБроорпН ро╡ро▓рпБрокрпНрокроЯрпБродрпНродрпБроорпН роорпБро▒рпИропро╛роХрпБроорпН.",
    2: "рокро╛родрпБроХро╛рокрпНрокро╛рой роироЯрпИроорпБро▒рпИроХро│рпИ роКроХрпНроХрпБро╡ро┐рокрпНрокродройрпН роорпВро▓роорпН ро╡ро┐рокродрпНродрпБроХро│рпИ роХрпБро▒рпИроХрпНроХ",
    3: "роЖроорпН, роЗродрпБ рокро╛родрпБроХро╛рокрпНрокро▒рпНро▒ рокро┤роХрпНроХроЩрпНроХро│рпИ роЪро░ро┐ роЪрпЖропрпНроп роЙродро╡рпБроХро┐ро▒родрпБ.",
    4: "роХро╡ройро┐роХрпНроХро╡рпБроорпН, роироЯродрпНродрпИрокрпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН, рокро┐ройрпНройрпВроЯрпНроЯроорпН роЕро│ро┐роХрпНроХро╡рпБроорпН.",
    5: "рокрогро┐ропро╛ро│ро░рпНроХро│рпН, роорпЗро▒рпНрокро╛ро░рпНро╡рпИропро╛ро│ро░рпНроХро│рпН рооро▒рпНро▒рпБроорпН роорпЗро▓ро╛рогрпНроорпИ."
  };


  final List<Map<String, dynamic>> quizQuestions = [
    {
      "question": "ЁЯза BBS роОройрпНрокродрпБ роОройрпНрой?",
      "options": [
        "роТро░рпБ роХрпВроЯрпИроЪрпНроЪрпЖропро▓ро┐ропро▓рпН рокроЯрпНроЯро┐ропро▓рпН",
        "рокропро┐ро▒рпНроЪро┐ ро╡рпАроЯро┐ропрпЛро╡ро┐ройрпН роТро░рпБ ро╡роХрпИ",
        "BBS роОройрпНрокродрпБ рокро╛родрпБроХро╛рокрпНрокро╛рой роироЯродрпНродрпИроорпБро▒рпИроХро│рпИ роЕроЯрпИропро╛ро│роорпН роХро╛рогрпБроорпН рооро▒рпНро▒рпБроорпН ро╡ро▓рпБрокрпНрокроЯрпБродрпНродрпБроорпН роорпБро▒рпИропро╛роХрпБроорпН.",
        "роорпЗро▓рпЗ роОродрпБро╡рпБроорпН роЗро▓рпНро▓рпИ"
      ]
    },
    {
      "question": "ЁЯОп BBS роПройрпН роЪрпЖропро▓рпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ?",
      "options": [
        "роЪрпЖро▓ро╡рпБроХро│рпИ роЕродро┐роХро░ро┐роХрпНроХ",
        "рокро╛родрпБроХро╛рокрпНрокро╛рой роироЯрпИроорпБро▒рпИроХро│рпИ роКроХрпНроХрпБро╡ро┐рокрпНрокродройрпН роорпВро▓роорпН ро╡ро┐рокродрпНродрпБроХро│рпИ роХрпБро▒рпИроХрпНроХ",
        "ро╡рпЗро▓рпИ роирпЗро░родрпНродрпИ роХрпБро▒рпИроХрпНроХ",
        "роЪроорпВроХ роКроЯроХ рокрпБроХро┤рпИ роЙропро░рпНродрпНрод"
      ]
    },
    {
      "question": "BBS рокро╛родрпБроХро╛рокрпНрокрпБ роХро▓ро╛роЪрпНроЪро╛ро░родрпНродрпИ роорпЗроорпНрокроЯрпБродрпНродрпБрооро╛?",
      "options": [
        "роЗро▓рпНро▓рпИ, роЗродрпБ рокропройро▒рпНро▒родрпБ",
        "роЖроорпН, роЗродрпБ рокро╛родрпБроХро╛рокрпНрокро▒рпНро▒ рокро┤роХрпНроХроЩрпНроХро│рпИ роЪро░ро┐ роЪрпЖропрпНроп роЙродро╡рпБроХро┐ро▒родрпБ.",
        "роорпЗро▓ро╛ро│ро░рпНроХро│рпБроХрпНроХрпЗ роороЯрпНроЯрпБроорпЗ",
        "рокрпЖро░ро┐роп роиро┐ро▒рпБро╡ройроЩрпНроХро│рпБроХрпНроХрпБ роороЯрпНроЯрпБроорпН"
      ]
    },
    {
      "question": "BBS роЗро▓рпН роорпБроХрпНроХро┐ропрооро╛рой рокроЯро┐роХро│рпН роОройрпНрой?",
      "options": [
        "роЕро▒ро┐роХрпНроХрпИ роОро┤рпБродро┐ рооро▒роирпНродрпБ ро╡ро┐роЯрпБ",
        "роХро╡ройро┐роХрпНроХро╡рпБроорпН, роироЯродрпНродрпИрокрпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН, рокро┐ройрпНройрпВроЯрпНроЯроорпН роЕро│ро┐роХрпНроХро╡рпБроорпН.",
        "рокрпБроХро╛ро░рпНроХро│рпИ рокродро┐ро╡рпБ роЪрпЖропрпН",
        "рокро╛родрпБроХро╛рокрпНрокро▒рпНро▒ роЪрпЖропро▓рпНроХро│рпИ рокрпБро▒роХрпНроХрогро┐"
      ]
    },
    {
      "question": "BBS ропро┐ро▓рпН ропро╛ро░рпН роХро▓роирпНродрпБ роХрпКро│рпНроХро┐ройрпНро▒ройро░рпН?",
      "options": [
        "рооройро┐род ро╡ро│родрпНродрпБро▒рпИ роороЯрпНроЯрпБроорпН",
        "рокро╛родрпБроХро╛рокрпНрокрпБ роЕродро┐роХро╛ро░ро┐роХро│рпН роороЯрпНроЯрпБроорпН",
        "рокрогро┐ропро╛ро│ро░рпНроХро│рпН, роорпЗро▒рпНрокро╛ро░рпНро╡рпИропро╛ро│ро░рпНроХро│рпН рооро▒рпНро▒рпБроорпН роорпЗро▓ро╛рогрпНроорпИ.",
        "ро╡рпЖро│ро┐ роирокро░рпНроХро│рпН"
      ]
    },
  ];

  @override
  void initState() {
    super.initState();
    _loadProgress();
  }

  Future<void> _loadProgress() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      isCompleted = prefs.getBool('Completed_$topicName') ?? false;
      quizScore = prefs.getInt('QuizScore_$topicName') ?? -1;
      hasTakenQuiz = prefs.getBool('QuizTaken_$topicName') ?? false;
    });
  }

  Future<void> _saveCompletion(bool value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('Completed_$topicName', value);
    setState(() {
      isCompleted = value;
    });
    if (value) _showQuizDialog();
  }

  Future<void> _saveQuizScore(int score) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('QuizScore_$topicName', score);
    await prefs.setBool('QuizTaken_$topicName', true);
    setState(() {
      quizScore = score;
      hasTakenQuiz = true;
    });
  }

  void _showQuizDialog() {
    userAnswers.clear();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext dialogContext) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text("ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛: BBS роЕро▒ро┐роорпБроХроорпН"),
              content: SingleChildScrollView(
                child: Column(
                  children: quizQuestions.map((question) {
                    int questionIndex = quizQuestions.indexOf(question) + 1;
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(question["question"], style: TextStyle(fontWeight: FontWeight.bold)),
                        ...question["options"].map<Widget>((option) {
                          return RadioListTile<String>(
                            title: Text(option),
                            value: option,
                            groupValue: userAnswers[questionIndex],
                            onChanged: (String? value) {
                              setState(() {
                                userAnswers[questionIndex] = value!;
                              });
                            },
                          );
                        }).toList(),
                      ],
                    );
                  }).toList(),
                ),
              ),
              actions: [
                TextButton(
                  child: Text("роЪрооро░рпНрокрпНрокро┐роХрпНроХ"),
                  onPressed: () {
                    if (userAnswers.length < quizQuestions.length) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text("роЕройрпИродрпНродрпБ роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБроорпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН")),
                      );
                    } else {
                      Navigator.pop(dialogContext);
                      _evaluateQuiz();
                    }
                  },
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _evaluateQuiz() {
    int score = 0;
    userAnswers.forEach((key, value) {
      if (correctAnswers[key] == value) {
        score++;
      }
    });
    _saveQuizScore(score);
    _showQuizResult(score);
  }

  void _showQuizResult(int score) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ роорпБроЯро┐ро╡рпБ"),
          content: Text("роирпАроЩрпНроХро│рпН ${quizQuestions.length} ро▓рпН $score роородро┐рокрпНрокрпЖрогрпН рокрпЖро▒рпНро▒рпБро│рпНро│рпАро░рпНроХро│рпН."),
          actions: [
            TextButton(
              child: Text("роЪро░ро┐"),
              onPressed: () => Navigator.pop(context),
            ),
            if (score >= 3)
              TextButton(
                child: Text("роЕроЯрпБродрпНрод родро▓рпИрокрпНрокрпБ"),
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(context, '/core_principles_ta');
                },
              ),
            TextButton(
              child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐"),
              onPressed: () {
                Navigator.pop(context);
                _showQuizDialog();
              },
            ),
          ],
        );
      },
    );
  }

  Widget _buildQA(String question, String answer, {String? imagePath}) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      elevation: 4,
      child: Padding(
        padding: EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (imagePath != null)
              ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.asset(imagePath, fit: BoxFit.cover, height: 180, width: double.infinity),
              ),
            if (imagePath != null) SizedBox(height: 10),
            Text(question, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 6),
            Text(answer, style: TextStyle(fontSize: 16)),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("BBS роЕро▒ро┐роорпБроХроорпН"),
        backgroundColor: Colors.blue,
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () => Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => BBSSafetyEnglish()),
          ),
        ),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: ListView(
                children: [
                  _buildQA(
                    "ЁЯза BBS роОройрпНро▒ро╛ро▓рпН роОройрпНрой?",
                    "BBS роОройрпНрокродрпБ роироЯродрпНродрпИ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой рокро╛родрпБроХро╛рокрпНрокрпБ роорпБро▒рпИропро╛роХрпБроорпН. роЗродрпБ рокрогро┐ропро╛ро│ро░рпНроХро│ро┐ройрпН роироЯродрпНродрпИ роорпАродрпБ роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроорпН рокро╛родрпБроХро╛рокрпНрокрпБ роорпЗро▓ро╛рогрпНроорпИ роЕрогрпБроХрпБроорпБро▒рпИ роЖроХрпБроорпН. роЗродрпБ роЕро╡родро╛ройро┐рокрпНрокрпБ, рокро┐ройрпНройрпВроЯрпНроЯроорпН рооро▒рпНро▒рпБроорпН роКроХрпНроХрпБро╡ро┐рокрпНрокро┐ройрпН роорпВро▓роорпН рокро╛родрпБроХро╛рокрпНрокро╛рой роироЯрпИроорпБро▒рпИроХро│рпИ роКроХрпНроХрпБро╡ро┐роХрпНроХро┐ро▒родрпБ.",
                    imagePath: 'assets/bbs_intro_1.png',
                  ),
                  _buildQA(
                    "ЁЯОп BBS-роЗройрпН роХрпБро▒ро┐роХрпНроХрпЛро│рпН",
                    "рокрогро┐ропро┐роЯ ро╡ро┐рокродрпНродрпБроХро│рпН рооро▒рпНро▒рпБроорпН роХро╛ропроЩрпНроХро│рпИродрпН родроЯрпБрокрпНрокродрпЗ BBS-роЗройрпН роорпБродройрпНроорпИропро╛рой роирпЛроХрпНроХрооро╛роХрпБроорпН. роЗродрпБ рокро╛родрпБроХро╛рокрпНрокро▒рпНро▒ роироЯрпИроорпБро▒рпИроХро│рпИ роЕроЯрпИропро╛ро│роорпН роХро╛рогрпНрокродройрпН роорпВро▓роорпН рокро╛родрпБроХро╛рокрпНрокро╛ройро╡ро▒рпНро▒рпИ ро╡ро▓рпБрокрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ.",
                  ),
                  _buildQA(
                    "ЁЯСе ропро╛ро░рпН роХро▓роирпНродрпБ роХрпКро│рпНроХро┐ро▒ро╛ро░рпНроХро│рпН?",
                    "BBS роОро▓рпНро▓ро╛ роиро┐ро▓рпИ рокрогро┐ропро╛ро│ро░рпНроХро│рпИропрпБроорпН роЙро│рпНро│роЯроХрпНроХрпБроХро┐ро▒родрпБ тАФ рокрогро┐ропро╛ро│ро░рпНроХро│рпН, роорпЗро▒рпНрокро╛ро░рпНро╡рпИропро╛ро│ро░рпНроХро│рпН рооро▒рпНро▒рпБроорпН роорпЗро▓ро╛рогрпНроорпИ роЖроХро┐ропрпЛро░рпН. роЗродрпБ роТро░рпБроЩрпНроХро┐рогрпИроирпНрод рокро╛родрпБроХро╛рокрпНрокрпБ рокрогрпНрокро╛роЯрпНроЯрпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ.",
                    imagePath: 'assets/bbs_intro_2.png',
                  ),
                  _buildQA(
                    "ЁЯФН роХро╡ройро┐рокрпНрокрпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛ройродрпБ",
                    "BBS роирпЗро░роЯро┐ рокрогро┐родрпНродро│ роироЯродрпНродрпИроЩрпНроХро│рпИрокрпН рокродро┐ро╡рпБ роЪрпЖропрпНродрпБ, родро░ро╡рпБроХро│рпИ роЪрпЗроХро░ро┐родрпНродрпБ, рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНродрпБ, роЙроЯройроЯро┐ рокро┐ройрпНройрпВроЯрпНроЯроорпН роЕро│ро┐роХрпНроХро┐ро▒родрпБ.",
                  ),
                  _buildQA(
                    "ЁЯУИ родро╛роХрпНроХроорпН",
                    "BBS-роР роЪрпЖропро▓рпНрокроЯрпБродрпНродрпБроорпН роиро┐ро▒рпБро╡ройроЩрпНроХро│рпН рокро╛родрпБроХро╛рокрпНрокрпБ роЪрпЖропро▓рпНродро┐ро▒ройрпН, роКроХрпНроХрооро│ро┐рокрпНрокрпБ рооро▒рпНро▒рпБроорпН рокро╛родрпБроХро╛рокрпНрокрпБ роорпБродройрпНроорпИ роЪро┐роирпНродройрпИропро┐ро▓рпН роорпЗроорпНрокро╛роЯрпНроЯрпИ роХро╛рогрпНроХро┐ройрпНро▒рой.",
                    imagePath: 'assets/bbs_intro_3.png',
                  ),
                ],
              ),
            ),
            CheckboxListTile(
              title: Text("роорпБроЯро┐роХрпНроХрокрпНрокроЯрпНроЯродро╛роХ роХрпБро▒ро┐ропро┐роЯрпБ"),
              value: isCompleted,
              onChanged: (value) {
                _saveCompletion(value ?? false);
              },
            ),
            if (hasTakenQuiz)
              Text("роХроЯрпИроЪро┐ ро╡ро┐ройро╛ роородро┐рокрпНрокрпЖрогрпН: $quizScore / ${quizQuestions.length}"),
            if (hasTakenQuiz)
              ElevatedButton(onPressed: _showQuizDialog, child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐")),
          ],
        ),
      ),
    );
  }
}
