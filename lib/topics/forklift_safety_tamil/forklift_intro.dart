// forklift_intro_ta.dart

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:e_she_book/tamil/forklift_safety_tamil.dart';

class ForkliftIntroTamilPage extends StatefulWidget {
  @override
  _ForkliftIntroTamilPageState createState() => _ForkliftIntroTamilPageState();
}

class _ForkliftIntroTamilPageState extends State<ForkliftIntroTamilPage> {
  bool isCompleted = false;
  int quizScore = -1;
  bool hasTakenQuiz = false;
  Map<int, String> userAnswers = {};
  final String topicName = "ForkliftIntroTamil";

  final Map<int, String> correctAnswers = {
    1: "рокрпКро░рпБроЯрпНроХро│рпИ рокро╛родрпБроХро╛рокрпНрокро╛роХ родрпВроХрпНроХро┐ роироХро░рпНродрпНрод рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ.",
    2: "роПройрпЖройро┐ро▓рпН роЗродрпБ роТро░рпБ роХройрооро╛рой рооро▒рпНро▒рпБроорпН роЪроХрпНродро┐ро╡ро╛ропрпНроирпНрод роЙрокроХро░рогрооро╛роХрпБроорпН.",
    3: "рооро┐роХро╡рпБроорпН родрпАро╡ро┐ро░рооро╛рой роХро╛ропроорпН роЕро▓рпНро▓родрпБ роЪрпЗродроорпН роПро▒рпНрокроЯро▓ро╛роорпН.",
    4: "роХрпИропрпЗроЯрпБроХро│рпИ рокроЯро┐роХрпНроХро╡рпБроорпН, рокропро┐ро▒рпНроЪро┐ роОроЯрпБроХрпНроХро╡рпБроорпН, ро╡ро┐родро┐роХро│рпИ рокро┐ройрпНрокро▒рпНро▒ро╡рпБроорпН.",
    5: "роЖрооро╛роорпН, роХрпБро▒ро┐рокрпНрокро╛роХ роХрпВроЯрпНроЯроорпН роЕродро┐роХрооро╛рой роЗроЯроЩрпНроХро│ро┐ро▓рпН."
  };

  final List<Map<String, dynamic>> quizQuestions = [
    {
      "question": "рокрпКро░рпБро│ро┐ройрпН роорпБроХрпНроХро┐роп роирпЛроХрпНроХроорпН роОройрпНрой?",
      "options": [
        "ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ", "роЪроорпИродрпНродро▓рпН", "рокрпКро░рпБроЯрпНроХро│рпИ рокро╛родрпБроХро╛рокрпНрокро╛роХ родрпВроХрпНроХро┐ роироХро░рпНродрпНрод рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ.", "роороХрпНроХро│рпИ роироХро░рпНродрпНрод" ]
    },
    {
      "question": "роПройрпН рокро╛родрпБроХро╛рокрпНрокрпБ роорпБроХрпНроХро┐ропроорпН?",
      "options": [
        "роЗродрпБ роОро│ро┐родро╛ройродрпБ", "ро╡рпЖро▒рпБроорпН ро╡рпЗроЯро┐роХрпНроХрпИ", "роПройрпЖройро┐ро▓рпН роЗродрпБ роТро░рпБ роХройрооро╛рой рооро▒рпНро▒рпБроорпН роЪроХрпНродро┐ро╡ро╛ропрпНроирпНрод роЙрокроХро░рогрооро╛роХрпБроорпН.", "роЪродрпНродроорпН роЕродро┐роХроорпН"]
    },
    {
      "question": "родро╡ро▒ро╛роХ рокропройрпНрокроЯрпБродрпНродро┐ройро╛ро▓рпН роОройрпНрой роироЯроХрпНроХрпБроорпН?",
      "options": [
        "рокро▒роХрпНроХрпБроорпН", "рооро┐роХро╡рпБроорпН родрпАро╡ро┐ро░рооро╛рой роХро╛ропроорпН роЕро▓рпНро▓родрпБ роЪрпЗродроорпН роПро▒рпНрокроЯро▓ро╛роорпН.", "ро╡рпЗроХрооро╛роХ роЗропроХрпНроХро▓ро╛роорпН", "роиро┐ро▒рпБродрпНродро┐ро╡ро┐роЯрпБроорпН"]
    },
    {
      "question": "рокро╛родрпБроХро╛рокрпНрокро╛роХ роЗропроХрпНроХ роОрокрпНрокроЯро┐роЪрпН роЪрпЖропрпНроХ?",
      "options": [
        "ро╡рпЗроХрооро╛роХ роУроЯрпНроЯрпБ", "рокропро┐ро▒рпНроЪро┐ропрпИ родро╡ро┐ро░рпНродрпНродрпБ", "роХрпИропрпЗроЯрпБроХро│рпИ рокроЯро┐роХрпНроХро╡рпБроорпН, рокропро┐ро▒рпНроЪро┐ роОроЯрпБроХрпНроХро╡рпБроорпН, ро╡ро┐родро┐роХро│рпИ рокро┐ройрпНрокро▒рпНро▒ро╡рпБроорпН.", "роОро▓рпНро▓ро╛ рокрпКродрпНродро╛ройрпНроХро│рпИропрпБроорпН роЕро┤рпБродрпНродро╡рпБроорпН"]
    },
    {
      "question": "рокрогро┐ропро┐роЯродрпНродро┐ро▓рпН роЗродрпБ роорпБроХрпНроХро┐ропрооро╛?",
      "options": [
        "роЗро▓рпНро▓рпИ", "роЖрооро╛роорпН, роХрпБро▒ро┐рокрпНрокро╛роХ роХрпВроЯрпНроЯроорпН роЕродро┐роХрооро╛рой роЗроЯроЩрпНроХро│ро┐ро▓рпН.", "ро╡рпАроЯрпНроЯро┐ро▓рпН роороЯрпНроЯрпБроорпН", "роЕро╡роЪро┐ропрооро┐ро▓рпНро▓рпИ"]
    },
  ];

  @override
  void initState() {
    super.initState();
    _loadProgress();
  }

  Future<void> _loadProgress() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      isCompleted = prefs.getBool('Completed_\$topicName') ?? false;
      quizScore = prefs.getInt('QuizScore_\$topicName') ?? -1;
      hasTakenQuiz = prefs.getBool('QuizTaken_\$topicName') ?? false;
    });
  }

  Future<void> _saveCompletion(bool value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('Completed_\$topicName', value);
    setState(() {
      isCompleted = value;
    });
    if (value) _showQuizDialog();
  }

  Future<void> _saveQuizScore(int score) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('QuizScore_\$topicName', score);
    await prefs.setBool('QuizTaken_\$topicName', true);
    await prefs.setBool('Completed_\$topicName', true);
    setState(() {
      quizScore = score;
      hasTakenQuiz = true;
      isCompleted = true;
    });
  }

  void _showQuizDialog() {
    userAnswers.clear();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext dialogContext) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text("ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛: Forklift роЕро▒ро┐роорпБроХроорпН"),
              content: SingleChildScrollView(
                child: Column(
                  children: quizQuestions.map((question) {
                    int questionIndex = quizQuestions.indexOf(question) + 1;
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(question["question"], style: TextStyle(fontWeight: FontWeight.bold)),
                        ...question["options"].map<Widget>((option) {
                          return RadioListTile<String>(
                            title: Text(option),
                            value: option,
                            groupValue: userAnswers[questionIndex],
                            onChanged: (String? value) {
                              setState(() {
                                userAnswers[questionIndex] = value!;
                              });
                            },
                          );
                        }).toList(),
                      ],
                    );
                  }).toList(),
                ),
              ),
              actions: [
                TextButton(
                  child: Text("роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН"),
                  onPressed: () {
                    if (userAnswers.length < quizQuestions.length) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text("родропро╡рпБ роЪрпЖропрпНродрпБ роЕройрпИродрпНродрпБ роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБроорпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН")),
                      );
                    } else {
                      Navigator.pop(dialogContext);
                      _evaluateQuiz();
                    }
                  },
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _evaluateQuiz() {
    int score = 0;
    userAnswers.forEach((key, value) {
      if (correctAnswers[key] == value) {
        score++;
      }
    });
    _saveQuizScore(score);
    _showQuizResult(score);
  }

  void _showQuizResult(int score) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("роорпБроЯро┐ро╡рпБроХро│рпН"),
          content: Text("роирпАроЩрпНроХро│рпН ${quizQuestions.length}ро▓рпН $score роородро┐рокрпНрокрпЖрогрпН рокрпЖро▒рпНро▒рпБро│рпНро│рпАро░рпНроХро│рпН."),
          actions: [
            TextButton(
              child: Text("роЪро░ро┐"),
              onPressed: () => Navigator.pop(context),
            ),
            if (score >= 3)
              TextButton(
                child: Text("роЕроЯрпБродрпНродродрпБ"),
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(context, '/center_of_gravity_ta');
                },
              ),
            TextButton(
              child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН"),
              onPressed: () {
                Navigator.pop(context);
                _showQuizDialog();
              },
            ),
          ],
        );
      },
    );
  }

  Widget _buildQA(String question, String answer, {String? imagePath}) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      elevation: 4,
      child: Padding(
        padding: EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (imagePath != null)
              ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.asset(imagePath, fit: BoxFit.cover, height: 180, width: double.infinity),
              ),
            if (imagePath != null) SizedBox(height: 10),
            Text(question, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 6),
            Text(answer, style: TextStyle(fontSize: 16)),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Forklift Safety роЕро▒ро┐роорпБроХроорпН"),
        backgroundColor: Colors.orange[800],
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () => Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => ForkliftSafetyTamil()),
          ),
        ),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: ListView(
                children: [
                  _buildQA("ЁЯЪЬ Forklift роОройрпНро▒ро╛ро▓рпН роОройрпНрой?", "роорпБройрпНрокрпБро▒родрпНродро┐ро▓рпН роХрпВро░рпНроорпИропро╛рой рокроХрпБродро┐ропрпБроЯройрпН рокрпКро░рпБроЯрпНроХро│рпИ родрпВроХрпНроХро┐ роироХро░рпНродрпНродрпБроорпН ро╡ро╛роХройроорпН.", imagePath: 'assets/forklift_1.0.png'),
                  _buildQA("тЪа роПройрпН рокро╛родрпБроХро╛рокрпНрокрпБ роорпБроХрпНроХро┐ропроорпН?", "родро╡ро▒ро╛рой рокропройрпНрокро╛роЯрпБ рокро▓рпНро╡рпЗро▒рпБ роЗроЯро░рпНрокро╛роЯрпБроХро│рпИ роПро▒рпНрокроЯрпБродрпНродро▓ро╛роорпН."),
                  _buildQA("тЭМ родро╡ро▒ро╛роХ рокропройрпНрокроЯрпБродрпНродро┐ройро╛ро▓рпН?", "родрпВроХрпНроХроорпН, роирпКро▒рпБроХрпНроХро▓рпН роЕро▓рпНро▓родрпБ ро╡ро┐рокродрпНродрпБроХрпНроХрпБро│рпНро│ро╛роХро▓ро╛роорпН.", imagePath: 'assets/forklift_1.1.png'),
                  _buildQA("ЁЯУШ рокро╛родрпБроХро╛рокрпНрокро╛роХ роЪрпЖропро▓рпНрокроЯ?", "рокропро┐ро▒рпНроЪро┐ роОроЯрпБродрпНродрпБ, ро╡ро┐родро┐роХро│рпИ рокро┐ройрпНрокро▒рпНро▒ро┐ рооро▒рпНро▒рпБроорпН роЪро░ро┐ропро╛рой роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБроХро│рпИ роЕро▒ро┐роирпНродрпБ роЪрпЖропро▓рпНрокроЯ ро╡рпЗрогрпНроЯрпБроорпН."),
                  _buildQA("ЁЯПн роЗродрпБ роОро▓рпНро▓ро╛ роЗроЯроЩрпНроХро│ро┐ро▓рпБроорпН родрпЗро╡рпИропро╛?", "роЖрооро╛роорпН, роХрпБро▒ро┐рокрпНрокро╛роХ родрпКро┤ро┐ро▒рпНроЪро╛ро▓рпИроХро│рпН, роХроЯрпНроЯрпБрооро╛рой роЗроЯроЩрпНроХро│рпН рокрпЛройрпНро▒ роЗроЯроЩрпНроХро│ро┐ро▓рпН.", imagePath: 'assets/forklift_1.2.png'),
                ],
              ),
            ),
            CheckboxListTile(
              title: Text("роиро┐ро▒рпИро╡рпБ роОрой роХрпБро▒ро┐роХрпНроХро╡рпБроорпН"),
              value: isCompleted,
              onChanged: (value) {
                _saveCompletion(value ?? false);
              },
            ),
            if (hasTakenQuiz)
              Text("роХроЯрпИроЪро┐ роородро┐рокрпНрокрпЖрогрпН: $quizScore / ${quizQuestions.length}"),
            if (hasTakenQuiz)
              ElevatedButton(onPressed: _showQuizDialog, child: Text("роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН")),
          ],
        ),
      ),
    );
  }
}
